diff --git a/src/base/tools/aapt2/ResourceTable.cpp b/src/base/tools/aapt2/ResourceTable.cpp
index a3b0b45df5c3..3978f40097f4 100644
--- a/src/base/tools/aapt2/ResourceTable.cpp
+++ b/src/base/tools/aapt2/ResourceTable.cpp
@@ -470,9 +470,7 @@ bool ResourceTable::AddResource(NewResource&& res, android::IDiagnostics* diag)
   const bool validate = validation_ == Validation::kEnabled;
   const android::Source source = res.value ? res.value->GetSource() : android::Source{};
   if (validate && !res.allow_mangled && !IsValidResourceEntryName(res.name.entry)) {
-    diag->Error(android::DiagMessage(source)
-                << "resource '" << res.name << "' has invalid entry name '" << res.name.entry);
-    return false;
+    return true;
   }
 
   if (res.id.has_value() && !res.id->first.is_valid()) {
diff --git a/src/base/tools/aapt2/ResourceUtils.cpp b/src/base/tools/aapt2/ResourceUtils.cpp
index d358df98ada6..a9fe4f431db8 100644
--- a/src/base/tools/aapt2/ResourceUtils.cpp
+++ b/src/base/tools/aapt2/ResourceUtils.cpp
@@ -217,7 +217,7 @@ bool ParseAttributeReference(StringPiece str, ResourceNameRef* out_ref) {
     }
 
     if (!type.empty() && type != "attr") {
-      return false;
+      // Apktool: Don't die out if private resource.
     }
 
     if (entry.empty()) {
diff --git a/src/base/tools/aapt2/cmd/Link.cpp b/src/base/tools/aapt2/cmd/Link.cpp
index 642a5618b6ad..73ba883a45cd 100644
--- a/src/base/tools/aapt2/cmd/Link.cpp
+++ b/src/base/tools/aapt2/cmd/Link.cpp
@@ -2483,9 +2483,9 @@ int LinkCommand::Action(const std::vector<std::string>& args) {
     if (package_id_int > std::numeric_limits<uint8_t>::max()
         || package_id_int == kFrameworkPackageId
         || (!options_.allow_reserved_package_id && package_id_int < kAppPackageId)) {
-      context.GetDiagnostics()->Error(
+      context.GetDiagnostics()->Warn(
           android::DiagMessage() << StringPrintf(
-              "invalid package ID 0x%02x. Must be in the range 0x7f-0xff.", package_id_int));
+              "invalid package ID 0x%02x. Must be in the range 0x7f-0xff. Ignoring...", package_id_int));
       return 1;
     }
     context.SetPackageId(static_cast<uint8_t>(package_id_int));
@@ -2589,6 +2589,23 @@ int LinkCommand::Action(const std::vector<std::string>& args) {
       ".mpg", ".mpeg", ".mp4", ".m4a", ".m4v", ".3gp", ".3gpp", ".3g2", ".3gpp2", ".wma", ".wmv",
       ".webm", ".mkv"});
 
+  // Populate no compress extensions specified in the extensions file.
+  if (options_.extensions_to_not_compress_path) {
+    std::ifstream extensionsFile(options_.extensions_to_not_compress_path.value());
+
+    if (extensionsFile.fail()) {
+      context.GetDiagnostics()->Error(
+        android::DiagMessage() << "could not open extensions file "
+          << options_.extensions_to_not_compress_path.value()
+          << " for reading");
+      return 1;
+    }
+
+    for (std::string line; getline(extensionsFile, line);) {
+      options_.extensions_to_not_compress.insert(line);
+    }
+  }
+
   // Turn off auto versioning for static-libs.
   if (context.GetPackageType() == PackageType::kStaticLib) {
     options_.no_auto_version = true;
diff --git a/src/base/tools/aapt2/cmd/Link.h b/src/base/tools/aapt2/cmd/Link.h
index 2f17853718ec..7d3111d5e712 100644
--- a/src/base/tools/aapt2/cmd/Link.h
+++ b/src/base/tools/aapt2/cmd/Link.h
@@ -78,6 +78,7 @@ struct LinkOptions {
   bool use_sparse_encoding = false;
   std::unordered_set<std::string> extensions_to_not_compress;
   std::optional<std::regex> regex_to_not_compress;
+  std::optional<std::string> extensions_to_not_compress_path;
   FeatureFlagValues feature_flag_values;
 
   // Static lib options.
@@ -291,6 +292,8 @@ class LinkCommand : public Command {
                     &options_.manifest_fixer_options.rename_overlay_category);
     AddOptionalFlagList("-0", "File suffix not to compress.",
         &options_.extensions_to_not_compress);
+    AddOptionalFlag("-e", "File containing list of extensions not to compress.",
+        &options_.extensions_to_not_compress_path);
     AddOptionalSwitch("--no-compress", "Do not compress any resources.",
         &options_.do_not_compress_anything);
     AddOptionalSwitch("--keep-raw-values", "Preserve raw attribute values in xml files.",
diff --git a/src/base/tools/aapt2/java/JavaClassGenerator.cpp b/src/base/tools/aapt2/java/JavaClassGenerator.cpp
index 6e73b017cce2..301c38b667ec 100644
--- a/src/base/tools/aapt2/java/JavaClassGenerator.cpp
+++ b/src/base/tools/aapt2/java/JavaClassGenerator.cpp
@@ -58,7 +58,8 @@ static const std::set<StringPiece> sJavaIdentifiers = {
     "true",       "false",        "null"};
 
 static bool IsValidSymbol(StringPiece symbol) {
-  return sJavaIdentifiers.find(symbol) == sJavaIdentifiers.end();
+  // Apktool: Everything is a valid symbol
+  return true;
 }
 
 // Java symbols can not contain . or -, but those are valid in a resource name.
diff --git a/src/base/tools/aapt2/link/PrivateAttributeMover.cpp b/src/base/tools/aapt2/link/PrivateAttributeMover.cpp
index 8c6c743dfff0..7a6d8ff0b93d 100644
--- a/src/base/tools/aapt2/link/PrivateAttributeMover.cpp
+++ b/src/base/tools/aapt2/link/PrivateAttributeMover.cpp
@@ -82,7 +82,6 @@ bool PrivateAttributeMover::Consume(IAaptContext* context, ResourceTable* table)
 
     auto attr_private_type = ResourceNamedTypeWithDefaultName(ResourceType::kAttrPrivate);
     ResourceTableType* priv_attr_type = package->FindOrCreateType(attr_private_type);
-    CHECK(priv_attr_type->entries.empty());
     priv_attr_type->entries = std::move(private_attr_entries);
   }
   return true;
